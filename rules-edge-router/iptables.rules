# A fairly basic and somewhat extensible router core ruleset
# Do not use unless you understand this example as
# modification for your usage may be required.
# Assumptions:
#  * 192.168.7.0/24 is your LAN, connected to if_lan
#  * if_wan is your uplink, with a dynamic public IP
# Note: in particular, no local ports are opened, including ssh.
#   Add whatever remote-access you need to prevent lockouts if this
#   is not a console-accessible box. You have been warned.

# This ruleset is in iptables-save(8) syntax. This means you can run
# this file as-is (or with your own modifications) through
# iptables-restore(8) to load them.

# Set up the nat table:
*nat
:PREROUTING ACCEPT
:INPUT ACCEPT
:OUTPUT ACCEPT
:POSTROUTING ACCEPT

# **********
# NAT rules:
# *****

# This rule performs SNAT (via MASQUERADE) suitable for use with an RFC1918 LAN
# behind the router. This rule may be omitted when using public IP space for the
# internal LAN.

-A POSTROUTING -o if_wan -j MASQUERADE

# These samples show how to do DNAT into your LAN, aka port-forwarding:

# -A PREROUTING -i if_wan -p tcp --dport 80 -j DNAT --to 192.168.7.101
# -A PREROUTING -i if_wan -p tcp --dport 443 -j DNAT --to 192.168.7.101:9090
# -A PREROUTING -i if_wan -p udp --dport 123 -j DNAT --to 192.168.7.200
# -A PREROUTING -i if_wan -p ipv6 -j DNAT --to 192.168.7.50

# Commit the nat table:
COMMIT

# Set up the filter table:
*filter
:INPUT DROP
:FORWARD DROP
:OUTPUT ACCEPT

# **********
# Rules for forwarded traffic:
# *****

# This rule accepts stateful traffic flowing in either direction:
-A FORWARD -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

# This allows the downstream LAN to send to the Internet:
-A FORWARD -i if_lan -s 192.168.7/24 -o if_wan -j ACCEPT

# This next rule allows any traffic that has been DNAT'd into the LAN:
-A FORWARD -m conntrack --ctstate DNAT -j ACCEPT

# **********
# Rules for traffic arriving for this host:
# *****

# This rule accepts stateful traffic to this host:
-A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

# Be permissive to loopback traffic:
-A INPUT -i lo -j ACCEPT

# You may want to allow open access to the router from the LAN network, but be
# aware this will allow local clients access to any running service.  It's
# generally better not to do this and to use the service-examples shown further
# below.

# blindly accept for anything from the LAN to this host:
# -A INPUT -i if_lan -s 192.168.7/4 -j ACCEPT

# The following commented rules demonstrate how to open ports for the local
# host. Depending on security needs, use of the -i and/or -s matches may be used
# to further restrict where traffic comes from; this can be useful if you wish
# to open ssh for LAN clients only but disallow external (Internet-sourced)
# connections.

# Accepting ping (icmp-echo-request) can be nice for diagnostic purposes.
# However, it also lets probes discover this host is alive.
# This sample accepts them within a certain rate limit:

# -A INPUT -p icmp --icmp-type ping -m limit --limit 5/second -j ACCEPT

# Some basic service examples are shown below:

# ssh example:
# -A INPUT -p tcp --dport 22 -j ACCEPT
# http example:
# -A INPUT -p tcp --dport 80 -j ACCEPT

# dns example, accepting traffic only from the LAN:
# -A INPUT -i if_lan -s 192.168.7/24 -p tcp --dport 53 -j ACCEPT
# -A INPUT -i if_lan -s 192.168.7/24 -p udp --dport 53 -j ACCEPT

# Commit the filter table:
COMMIT
